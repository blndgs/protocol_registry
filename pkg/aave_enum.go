// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package pkg

import (
	"errors"
	"fmt"
)

const (
	// AaveProtocolForkAave is a AaveProtocolFork of type Aave.
	AaveProtocolForkAave AaveProtocolFork = iota
	// AaveProtocolForkSpark is a AaveProtocolFork of type Spark.
	AaveProtocolForkSpark
)

var ErrInvalidAaveProtocolFork = errors.New("not a valid AaveProtocolFork")

const _AaveProtocolForkName = "aavespark"

var _AaveProtocolForkMap = map[AaveProtocolFork]string{
	AaveProtocolForkAave:  _AaveProtocolForkName[0:4],
	AaveProtocolForkSpark: _AaveProtocolForkName[4:9],
}

// String implements the Stringer interface.
func (x AaveProtocolFork) String() string {
	if str, ok := _AaveProtocolForkMap[x]; ok {
		return str
	}
	return fmt.Sprintf("AaveProtocolFork(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AaveProtocolFork) IsValid() bool {
	_, ok := _AaveProtocolForkMap[x]
	return ok
}

var _AaveProtocolForkValue = map[string]AaveProtocolFork{
	_AaveProtocolForkName[0:4]: AaveProtocolForkAave,
	_AaveProtocolForkName[4:9]: AaveProtocolForkSpark,
}

// ParseAaveProtocolFork attempts to convert a string to a AaveProtocolFork.
func ParseAaveProtocolFork(name string) (AaveProtocolFork, error) {
	if x, ok := _AaveProtocolForkValue[name]; ok {
		return x, nil
	}
	return AaveProtocolFork(0), fmt.Errorf("%s is %w", name, ErrInvalidAaveProtocolFork)
}
